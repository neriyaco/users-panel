{
    "sourceFile": "src/components/DynamicForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1679981048677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1679981092361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,13 +37,19 @@\n \n     const createInput = (field: DynamicFormField) => {\n         const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n             if (field.validation) {\n-                const isValid = field.validation(e.target.value);\n-                if (!isValid) {\n-                    e.target.setCustomValidity(\"Invalid value\");\n-                } else {\n-                    e.target.setCustomValidity(\"\");\n+                try {\n+\n+                    const isValid = field.validation(e.target.value);\n+                    if (!isValid) {\n+                        e.target.setCustomValidity(\"Invalid value\");\n+                    } else {\n+                        e.target.setCustomValidity(\"\");\n+                    }\n+                } catch (error: any) {\n+                    console.error(error);\n+                    e.target.setCustomValidity(error.message);\n                 }\n             }\n \n             field.value = e.target.value;\n"
                },
                {
                    "date": 1679981153495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n                     } else {\n                         e.target.setCustomValidity(\"\");\n                     }\n                 } catch (error: any) {\n-                    console.error(error);\n                     e.target.setCustomValidity(error.message);\n                 }\n             }\n \n"
                },
                {
                    "date": 1679981349091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Box, Button, Checkbox, InputLabel, TextField } from \"@mui/material\";\n+import { Box, Button, Checkbox, InputLabel, Snackbar, TextField } from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n     Text = \"text\",\n@@ -88,17 +88,20 @@\n     }\n \n \n     return (\n-        <Box component=\"form\" onSubmit={handleSubmit}>\n-            {formFields.map((field) => (\n-                <Box key={field.name} sx={{ marginBottom: '1em' }}>\n-                    <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n-                    {createInput(field)}\n+        <>\n+            <Box component=\"form\" onSubmit={handleSubmit}>\n+                {formFields.map((field) => (\n+                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n+                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n+                        {createInput(field)}\n+                    </Box>\n+                ))}\n+                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n+                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n-            ))}\n-            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n-                <Button type=\"submit\" variant=\"contained\">Submit</Button>\n             </Box>\n-        </Box>\n+            <Snackbar open={true} message=\"Hello\" />\n+        </>\n     )\n }\n"
                },
                {
                    "date": 1679981425066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,8 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n-            <Snackbar open={true} message=\"Hello\" />\n+            <Snackbar open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} />\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981497155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n }\n \n export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n     const [formFields, setFormFields] = useState(fields);\n+    const [errors, setErrors] = useState<any>({});\n     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n         e.preventDefault();\n         if (!e.currentTarget.checkValidity()) {\n             return;\n@@ -42,13 +43,15 @@\n \n                     const isValid = field.validation(e.target.value);\n                     if (!isValid) {\n                         e.target.setCustomValidity(\"Invalid value\");\n+                        setErrors({ ...errors, [field.name]: \"Invalid value\" });\n                     } else {\n                         e.target.setCustomValidity(\"\");\n                     }\n                 } catch (error: any) {\n                     e.target.setCustomValidity(error.message);\n+                    setErrors({ ...errors, [field.name]: error.message });\n                 }\n             }\n \n             field.value = e.target.value;\n@@ -100,8 +103,8 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n-            <Snackbar open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} />\n+            <Snackbar severity=\"error\" open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} />\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981516716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,10 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n-            <Snackbar severity=\"error\" open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} />\n+            <Snackbar open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n+                \n+            </Snackbar>\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981531060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Box, Button, Checkbox, InputLabel, Snackbar, TextField } from \"@mui/material\";\n+import { Alert, Box, Button, Checkbox, InputLabel, Snackbar, TextField } from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n     Text = \"text\",\n@@ -104,9 +104,9 @@\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n             <Snackbar open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n-                \n+                <Alert severity=\"error\">This is an error message!</Alert>\n             </Snackbar>\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981583728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,10 +103,12 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n-            <Snackbar open={true} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n-                <Alert severity=\"error\">This is an error message!</Alert>\n+            <Snackbar open={Object.keys(errors).length > 0} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n+                {Object.keys(errors).map((key) => (\n+                    <Alert key={key} severity=\"error\">{errors[key]}</Alert>\n+                ))}\n             </Snackbar>\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981619974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,12 +103,14 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n-            <Snackbar open={Object.keys(errors).length > 0} message=\"Hello\" anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}>\n-                {Object.keys(errors).map((key) => (\n-                    <Alert key={key} severity=\"error\">{errors[key]}</Alert>\n-                ))}\n-            </Snackbar>\n+            {\n+                Object.keys(errors).map((key) => (\n+                    <Snackbar key={key} open={true} autoHideDuration={6000}>\n+                        <Alert severity=\"error\">{errors[key]}</Alert>\n+                    </Snackbar>\n+                ))\n+            }\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679981679726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,34 +27,30 @@\n     const [formFields, setFormFields] = useState(fields);\n     const [errors, setErrors] = useState<any>({});\n     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n         e.preventDefault();\n-        if (!e.currentTarget.checkValidity()) {\n-            return;\n+        setErrors({});\n+        for (const field of formFields) {\n+            if (field.required && !field.value) {\n+                setErrors({ ...errors, [field.name]: `${field.label} is required` });\n+                return;\n+            }\n+            if (field.validation) {\n+                try {\n+                    field.validation(field.value);\n+                } catch (error: any) {\n+                    setErrors({ ...errors, [field.name]: error.message });\n+                    return;\n+                }\n+            }\n         }\n         const values = Object.fromEntries(new FormData(e.currentTarget));\n         onSubmit(values);\n     };\n \n \n     const createInput = (field: DynamicFormField) => {\n         const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-            if (field.validation) {\n-                try {\n-\n-                    const isValid = field.validation(e.target.value);\n-                    if (!isValid) {\n-                        e.target.setCustomValidity(\"Invalid value\");\n-                        setErrors({ ...errors, [field.name]: \"Invalid value\" });\n-                    } else {\n-                        e.target.setCustomValidity(\"\");\n-                    }\n-                } catch (error: any) {\n-                    e.target.setCustomValidity(error.message);\n-                    setErrors({ ...errors, [field.name]: error.message });\n-                }\n-            }\n-\n             field.value = e.target.value;\n             setFormFields([...formFields]);\n         }\n \n"
                },
                {
                    "date": 1679981728282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                         key={field.name}\n                         name={field.name}\n                         label={field.label}\n                         type={field.type}\n-                        required={field.required}\n+                        // required={field.required}\n                         value={field.value}\n                         variant=\"standard\"\n                         onChange={handleChange}\n                     />\n"
                },
                {
                    "date": 1679981816427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,26 +24,27 @@\n }\n \n export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n     const [formFields, setFormFields] = useState(fields);\n-    const [errors, setErrors] = useState<any>({});\n+    const [errors, setErrors] = useState<string[]>([]);\n     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n         e.preventDefault();\n-        setErrors({});\n+        setErrors([]);\n         for (const field of formFields) {\n             if (field.required && !field.value) {\n-                setErrors({ ...errors, [field.name]: `${field.label} is required` });\n+                errors.push(`${field.label} is required`);\n                 return;\n             }\n             if (field.validation) {\n                 try {\n                     field.validation(field.value);\n                 } catch (error: any) {\n-                    setErrors({ ...errors, [field.name]: error.message });\n+                    errors.push(error.message);\n                     return;\n                 }\n             }\n         }\n+        setErrors(errors);\n         const values = Object.fromEntries(new FormData(e.currentTarget));\n         onSubmit(values);\n     };\n \n"
                },
                {
                    "date": 1679981865639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,11 +101,11 @@\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n             {\n-                Object.keys(errors).map((key) => (\n-                    <Snackbar key={key} open={true} autoHideDuration={6000}>\n-                        <Alert severity=\"error\">{errors[key]}</Alert>\n+                errors.map((message, i) => (\n+                    <Snackbar key={`error-${i}`} open={true} autoHideDuration={6000}>\n+                        <Alert severity=\"error\">{message}</Alert>\n                     </Snackbar>\n                 ))\n             }\n         </>\n"
                },
                {
                    "date": 1679981896105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,14 @@\n         setErrors([]);\n         for (const field of formFields) {\n             if (field.required && !field.value) {\n                 errors.push(`${field.label} is required`);\n-                return;\n             }\n             if (field.validation) {\n                 try {\n                     field.validation(field.value);\n                 } catch (error: any) {\n                     errors.push(error.message);\n-                    return;\n                 }\n             }\n         }\n         setErrors(errors);\n"
                },
                {
                    "date": 1679981929954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,12 @@\n                     errors.push(error.message);\n                 }\n             }\n         }\n-        setErrors(errors);\n+        if (errors.length > 0) {\n+            setErrors([...errors]);\n+            return;\n+        }\n         const values = Object.fromEntries(new FormData(e.currentTarget));\n         onSubmit(values);\n     };\n \n"
                },
                {
                    "date": 1679981975505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     const [formFields, setFormFields] = useState(fields);\n     const [errors, setErrors] = useState<string[]>([]);\n     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n         e.preventDefault();\n-        setErrors([]);\n+        const errors: string[] = [];\n         for (const field of formFields) {\n             if (field.required && !field.value) {\n                 errors.push(`${field.label} is required`);\n             }\n"
                },
                {
                    "date": 1679982067248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,11 @@\n                 errors.push(`${field.label} is required`);\n             }\n             if (field.validation) {\n                 try {\n-                    field.validation(field.value);\n+                    if(!field.validation(field.value)) {\n+                        errors.push(`${field.label} is invalid`);\n+                    }\n                 } catch (error: any) {\n                     errors.push(error.message);\n                 }\n             }\n"
                },
                {
                    "date": 1679982202209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,30 +24,28 @@\n }\n \n export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n     const [formFields, setFormFields] = useState(fields);\n-    const [errors, setErrors] = useState<string[]>([]);\n+    const [errorMessage, setErrorMessage] = useState(\"\");\n     const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n         e.preventDefault();\n-        const errors: string[] = [];\n         for (const field of formFields) {\n             if (field.required && !field.value) {\n-                errors.push(`${field.label} is required`);\n+                setErrorMessage(`${field.label} is required`);\n+                return;\n             }\n             if (field.validation) {\n                 try {\n                     if(!field.validation(field.value)) {\n-                        errors.push(`${field.label} is invalid`);\n+                        setErrorMessage(`${field.label} is invalid`);\n+                        return;\n                     }\n                 } catch (error: any) {\n-                    errors.push(error.message);\n+                    setErrorMessage(error.message);\n+                    return;\n                 }\n             }\n         }\n-        if (errors.length > 0) {\n-            setErrors([...errors]);\n-            return;\n-        }\n         const values = Object.fromEntries(new FormData(e.currentTarget));\n         onSubmit(values);\n     };\n \n"
                },
                {
                    "date": 1679982271597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n                 return;\n             }\n             if (field.validation) {\n                 try {\n-                    if(!field.validation(field.value)) {\n+                    if (!field.validation(field.value)) {\n                         setErrorMessage(`${field.label} is invalid`);\n                         return;\n                     }\n                 } catch (error: any) {\n@@ -101,14 +101,14 @@\n                 <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                     <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n             </Box>\n+\n             {\n-                errors.map((message, i) => (\n-                    <Snackbar key={`error-${i}`} open={true} autoHideDuration={6000}>\n-                        <Alert severity=\"error\">{message}</Alert>\n-                    </Snackbar>\n-                ))\n+                errorMessage && <Snackbar open={!!errorMessage} autoHideDuration={6000}>\n+                    <Alert severity=\"error\">{errorMessage}</Alert>\n+                </Snackbar>\n             }\n+\n         </>\n     )\n }\n"
                },
                {
                    "date": 1679982332984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,13 @@\n         const values = Object.fromEntries(new FormData(e.currentTarget));\n         onSubmit(values);\n     };\n \n+    const closeErrorMessage = () => {\n+        setErrorMessage(\"\");\n+    }\n \n+\n     const createInput = (field: DynamicFormField) => {\n         const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n             field.value = e.target.value;\n             setFormFields([...formFields]);\n@@ -103,9 +107,9 @@\n                 </Box>\n             </Box>\n \n             {\n-                errorMessage && <Snackbar open={!!errorMessage} autoHideDuration={6000}>\n+                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n                     <Alert severity=\"error\">{errorMessage}</Alert>\n                 </Snackbar>\n             }\n \n"
                },
                {
                    "date": 1679986858109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,17 @@\n     Number = \"number\",\n     Email = \"email\",\n     Tel = \"tel\",\n     Url = \"url\",\n+    Password = \"password\",\n+    Checkbox = \"checkbox\",\n+    Select = \"select\",\n }\n \n export interface DynamicFormField {\n     name: string;\n     label: string;\n-    type: string;\n+    type: DynamicFormFieldType;\n     required?: boolean;\n     value?: any;\n     validation?: (value: any) => boolean;\n }\n@@ -65,8 +68,9 @@\n             case DynamicFormFieldType.Number:\n             case DynamicFormFieldType.Email:\n             case DynamicFormFieldType.Tel:\n             case DynamicFormFieldType.Url:\n+            case DynamicFormFieldType.Password:\n                 return (\n                     <TextField\n                         key={field.name}\n                         name={field.name}\n@@ -77,17 +81,23 @@\n                         variant=\"standard\"\n                         onChange={handleChange}\n                     />\n                 );\n-            case \"checkbox\":\n+            case DynamicFormFieldType.Checkbox:\n                 return (\n                     <Checkbox\n                         key={field.name}\n                         name={field.name}\n                         required={field.required}\n                         checked={field.value}\n                     />\n                 );\n+            case DynamicFormFieldType.Select:\n+                return (\n+                    <>\n+                    </>\n+                );\n+\n             default:\n                 return null;\n         }\n     }\n"
                },
                {
                    "date": 1679986898178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Alert, Box, Button, Checkbox, InputLabel, Snackbar, TextField } from \"@mui/material\";\n+import { Alert, Box, Button, Checkbox, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n     Text = \"text\",\n@@ -18,8 +18,9 @@\n     type: DynamicFormFieldType;\n     required?: boolean;\n     value?: any;\n     validation?: (value: any) => boolean;\n+    options?: { value: any; label: string }[];\n }\n \n export interface DynamicFormProps {\n     fields: DynamicFormField[];\n@@ -92,10 +93,13 @@\n                     />\n                 );\n             case DynamicFormFieldType.Select:\n                 return (\n-                    <>\n-                    </>\n+                    <Select>\n+                        {field.options?.map((option) => (\n+                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n+                        ))}\n+                    </Select>\n                 );\n \n             default:\n                 return null;\n"
                },
                {
                    "date": 1679986997474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import { Alert, Box, Button, Checkbox, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n+import { useState } from \"react\";\n+\n+export enum DynamicFormFieldType {\n+    Text = \"text\",\n+    Number = \"number\",\n+    Email = \"email\",\n+    Tel = \"tel\",\n+    Url = \"url\",\n+    Password = \"password\",\n+    Checkbox = \"checkbox\",\n+    Select = \"select\",\n+}\n+\n+export interface DynamicFormField {\n+    name: string;\n+    label: string;\n+    type: DynamicFormFieldType;\n+    required?: boolean;\n+    value?: any;\n+    validation?: (value: any) => boolean;\n+    options?: { value: any; label: string }[];\n+}\n+\n+export interface DynamicFormProps {\n+    fields: DynamicFormField[];\n+    onSubmit: (values: any) => void;\n+}\n+\n+export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n+    const [formFields, setFormFields] = useState(fields);\n+    const [errorMessage, setErrorMessage] = useState(\"\");\n+    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n+        e.preventDefault();\n+        for (const field of formFields) {\n+            if (field.required && !field.value) {\n+                setErrorMessage(`${field.label} is required`);\n+                return;\n+            }\n+            if (field.validation) {\n+                try {\n+                    if (!field.validation(field.value)) {\n+                        setErrorMessage(`${field.label} is invalid`);\n+                        return;\n+                    }\n+                } catch (error: any) {\n+                    setErrorMessage(error.message);\n+                    return;\n+                }\n+            }\n+        }\n+        const values = Object.fromEntries(new FormData(e.currentTarget));\n+        onSubmit(values);\n+    };\n+\n+    const closeErrorMessage = () => {\n+        setErrorMessage(\"\");\n+    }\n+\n+\n+    const createInput = (field: DynamicFormField) => {\n+        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+            field.value = e.target.value;\n+            setFormFields([...formFields]);\n+        }\n+\n+        switch (field.type) {\n+            case DynamicFormFieldType.Text:\n+            case DynamicFormFieldType.Number:\n+            case DynamicFormFieldType.Email:\n+            case DynamicFormFieldType.Tel:\n+            case DynamicFormFieldType.Url:\n+            case DynamicFormFieldType.Password:\n+                return (\n+                    <TextField\n+                        key={field.name}\n+                        name={field.name}\n+                        label={field.label}\n+                        type={field.type}\n+                        // required={field.required}\n+                        value={field.value}\n+                        variant=\"standard\"\n+                        onChange={handleChange}\n+                    />\n+                );\n+            case DynamicFormFieldType.Checkbox:\n+                return (\n+                    <Checkbox\n+                        key={field.name}\n+                        name={field.name}\n+                        required={field.required}\n+                        checked={field.value}\n+                    />\n+                );\n+            case DynamicFormFieldType.Select:\n+                return (\n+                    <>\n+                    </>\n+                    <Select>\n+                        {field.options?.map((option) => (\n+                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n+                        ))}\n+                    </Select>\n+                );\n+\n+            default:\n+                return null;\n+        }\n+    }\n+\n+\n+    return (\n+        <>\n+            <Box component=\"form\" onSubmit={handleSubmit}>\n+                {formFields.map((field) => (\n+                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n+                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n+                        {createInput(field)}\n+                    </Box>\n+                ))}\n+                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n+                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n+                </Box>\n+            </Box>\n+\n+            {\n+                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n+                    <Alert severity=\"error\">{errorMessage}</Alert>\n+                </Snackbar>\n+            }\n+\n+        </>\n+    )\n+}\n"
                },
                {
                    "date": 1679987003167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Alert, Box, Button, Checkbox, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n+import { Alert, Box, Button, Checkbox, FormControl, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n     Text = \"text\",\n@@ -93,10 +93,11 @@\n                     />\n                 );\n             case DynamicFormFieldType.Select:\n                 return (\n-                    <>\n-                    </>\n+                    <FormControl>\n+                        \n+                    </FormControl>\n                     <Select>\n                         {field.options?.map((option) => (\n                             <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n                         ))}\n@@ -131,136 +132,4 @@\n \n         </>\n     )\n }\n-import { Alert, Box, Button, Checkbox, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n-import { useState } from \"react\";\n-\n-export enum DynamicFormFieldType {\n-    Text = \"text\",\n-    Number = \"number\",\n-    Email = \"email\",\n-    Tel = \"tel\",\n-    Url = \"url\",\n-    Password = \"password\",\n-    Checkbox = \"checkbox\",\n-    Select = \"select\",\n-}\n-\n-export interface DynamicFormField {\n-    name: string;\n-    label: string;\n-    type: DynamicFormFieldType;\n-    required?: boolean;\n-    value?: any;\n-    validation?: (value: any) => boolean;\n-    options?: { value: any; label: string }[];\n-}\n-\n-export interface DynamicFormProps {\n-    fields: DynamicFormField[];\n-    onSubmit: (values: any) => void;\n-}\n-\n-export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n-    const [formFields, setFormFields] = useState(fields);\n-    const [errorMessage, setErrorMessage] = useState(\"\");\n-    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n-        e.preventDefault();\n-        for (const field of formFields) {\n-            if (field.required && !field.value) {\n-                setErrorMessage(`${field.label} is required`);\n-                return;\n-            }\n-            if (field.validation) {\n-                try {\n-                    if (!field.validation(field.value)) {\n-                        setErrorMessage(`${field.label} is invalid`);\n-                        return;\n-                    }\n-                } catch (error: any) {\n-                    setErrorMessage(error.message);\n-                    return;\n-                }\n-            }\n-        }\n-        const values = Object.fromEntries(new FormData(e.currentTarget));\n-        onSubmit(values);\n-    };\n-\n-    const closeErrorMessage = () => {\n-        setErrorMessage(\"\");\n-    }\n-\n-\n-    const createInput = (field: DynamicFormField) => {\n-        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-            field.value = e.target.value;\n-            setFormFields([...formFields]);\n-        }\n-\n-        switch (field.type) {\n-            case DynamicFormFieldType.Text:\n-            case DynamicFormFieldType.Number:\n-            case DynamicFormFieldType.Email:\n-            case DynamicFormFieldType.Tel:\n-            case DynamicFormFieldType.Url:\n-            case DynamicFormFieldType.Password:\n-                return (\n-                    <TextField\n-                        key={field.name}\n-                        name={field.name}\n-                        label={field.label}\n-                        type={field.type}\n-                        // required={field.required}\n-                        value={field.value}\n-                        variant=\"standard\"\n-                        onChange={handleChange}\n-                    />\n-                );\n-            case DynamicFormFieldType.Checkbox:\n-                return (\n-                    <Checkbox\n-                        key={field.name}\n-                        name={field.name}\n-                        required={field.required}\n-                        checked={field.value}\n-                    />\n-                );\n-            case DynamicFormFieldType.Select:\n-                return (\n-                    <Select>\n-                        {field.options?.map((option) => (\n-                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n-                        ))}\n-                    </Select>\n-                );\n-\n-            default:\n-                return null;\n-        }\n-    }\n-\n-\n-    return (\n-        <>\n-            <Box component=\"form\" onSubmit={handleSubmit}>\n-                {formFields.map((field) => (\n-                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n-                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n-                        {createInput(field)}\n-                    </Box>\n-                ))}\n-                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n-                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n-                </Box>\n-            </Box>\n-\n-            {\n-                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n-                    <Alert severity=\"error\">{errorMessage}</Alert>\n-                </Snackbar>\n-            }\n-\n-        </>\n-    )\n-}\n"
                },
                {
                    "date": 1679987011402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,15 +94,15 @@\n                 );\n             case DynamicFormFieldType.Select:\n                 return (\n                     <FormControl>\n-                        \n+                        <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n+                        <Select>\n+                            {field.options?.map((option) => (\n+                                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n+                            ))}\n+                        </Select>\n                     </FormControl>\n-                    <Select>\n-                        {field.options?.map((option) => (\n-                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n-                        ))}\n-                    </Select>\n                 );\n \n             default:\n                 return null;\n"
                },
                {
                    "date": 1679987043848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,41 +95,41 @@\n             case DynamicFormFieldType.Select:\n                 return (\n                     <FormControl>\n                         <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n-                        <Select>\n-                            {field.options?.map((option) => (\n-                                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n-                            ))}\n-                        </Select>\n-                    </FormControl>\n+                        <Select sx={{width: '100%'}}>\n+                        {field.options?.map((option) => (\n+                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n+                        ))}\n+                    </Select>\n+                    </FormControl >\n                 );\n \n             default:\n-                return null;\n-        }\n+    return null;\n+}\n     }\n \n \n-    return (\n-        <>\n-            <Box component=\"form\" onSubmit={handleSubmit}>\n-                {formFields.map((field) => (\n-                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n-                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n-                        {createInput(field)}\n-                    </Box>\n-                ))}\n-                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n-                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n+return (\n+    <>\n+        <Box component=\"form\" onSubmit={handleSubmit}>\n+            {formFields.map((field) => (\n+                <Box key={field.name} sx={{ marginBottom: '1em' }}>\n+                    <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n+                    {createInput(field)}\n                 </Box>\n+            ))}\n+            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n+                <Button type=\"submit\" variant=\"contained\">Submit</Button>\n             </Box>\n+        </Box>\n \n-            {\n-                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n-                    <Alert severity=\"error\">{errorMessage}</Alert>\n-                </Snackbar>\n-            }\n+        {\n+            errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n+                <Alert severity=\"error\">{errorMessage}</Alert>\n+            </Snackbar>\n+        }\n \n-        </>\n-    )\n+    </>\n+)\n }\n"
                },
                {
                    "date": 1679987154577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,18 @@\n             field.value = e.target.value;\n             setFormFields([...formFields]);\n         }\n \n+        const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+            field.value = e.target.checked;\n+            setFormFields([...formFields]);\n+        }\n+\n+        const handleSelectChange = (e: React.SelectChangeEvent<{ value: unknown }>, node: React.ReactNode) => {\n+            field.value = e.target.value;\n+            setFormFields([...formFields]);\n+        }\n+\n         switch (field.type) {\n             case DynamicFormFieldType.Text:\n             case DynamicFormFieldType.Number:\n             case DynamicFormFieldType.Email:\n@@ -95,41 +105,47 @@\n             case DynamicFormFieldType.Select:\n                 return (\n                     <FormControl>\n                         <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n-                        <Select sx={{width: '100%'}}>\n-                        {field.options?.map((option) => (\n-                            <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n-                        ))}\n-                    </Select>\n+                        <Select\n+                            labelId=\"demo-simple-select-label\"\n+                            id=\"demo-simple-select\"\n+                            value={field.value}\n+                            label={field.label}\n+                            onChange={handleSelectChange}\n+                        >\n+                            {field.options?.map((option) => (\n+                                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n+                            ))}\n+                        </Select>\n                     </FormControl >\n                 );\n \n             default:\n-    return null;\n-}\n+                return null;\n+        }\n     }\n \n \n-return (\n-    <>\n-        <Box component=\"form\" onSubmit={handleSubmit}>\n-            {formFields.map((field) => (\n-                <Box key={field.name} sx={{ marginBottom: '1em' }}>\n-                    <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n-                    {createInput(field)}\n+    return (\n+        <>\n+            <Box component=\"form\" onSubmit={handleSubmit}>\n+                {formFields.map((field) => (\n+                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n+                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n+                        {createInput(field)}\n+                    </Box>\n+                ))}\n+                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n+                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n                 </Box>\n-            ))}\n-            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n-                <Button type=\"submit\" variant=\"contained\">Submit</Button>\n             </Box>\n-        </Box>\n \n-        {\n-            errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n-                <Alert severity=\"error\">{errorMessage}</Alert>\n-            </Snackbar>\n-        }\n+            {\n+                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n+                    <Alert severity=\"error\">{errorMessage}</Alert>\n+                </Snackbar>\n+            }\n \n-    </>\n-)\n+        </>\n+    )\n }\n"
                },
                {
                    "date": 1679987168984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             field.value = e.target.checked;\n             setFormFields([...formFields]);\n         }\n \n-        const handleSelectChange = (e: React.SelectChangeEvent<{ value: unknown }>, node: React.ReactNode) => {\n+        const handleSelectChange = (e: SelectChangeEvent<{ value: unknown }>, node: React.ReactNode) => {\n             field.value = e.target.value;\n             setFormFields([...formFields]);\n         }\n \n"
                },
                {
                    "date": 1679987184113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,151 +1,174 @@\n-import { Alert, Box, Button, Checkbox, FormControl, InputLabel, MenuItem, Select, Snackbar, TextField } from \"@mui/material\";\n+import {\n+  Alert,\n+  Box,\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  InputLabel,\n+  MenuItem,\n+  Select,\n+  Snackbar,\n+  TextField,\n+  SelectChangeEvent\n+} from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n-    Text = \"text\",\n-    Number = \"number\",\n-    Email = \"email\",\n-    Tel = \"tel\",\n-    Url = \"url\",\n-    Password = \"password\",\n-    Checkbox = \"checkbox\",\n-    Select = \"select\",\n+  Text = \"text\",\n+  Number = \"number\",\n+  Email = \"email\",\n+  Tel = \"tel\",\n+  Url = \"url\",\n+  Password = \"password\",\n+  Checkbox = \"checkbox\",\n+  Select = \"select\",\n }\n \n export interface DynamicFormField {\n-    name: string;\n-    label: string;\n-    type: DynamicFormFieldType;\n-    required?: boolean;\n-    value?: any;\n-    validation?: (value: any) => boolean;\n-    options?: { value: any; label: string }[];\n+  name: string;\n+  label: string;\n+  type: DynamicFormFieldType;\n+  required?: boolean;\n+  value?: any;\n+  validation?: (value: any) => boolean;\n+  options?: { value: any; label: string }[];\n }\n \n export interface DynamicFormProps {\n-    fields: DynamicFormField[];\n-    onSubmit: (values: any) => void;\n+  fields: DynamicFormField[];\n+  onSubmit: (values: any) => void;\n }\n \n export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n-    const [formFields, setFormFields] = useState(fields);\n-    const [errorMessage, setErrorMessage] = useState(\"\");\n-    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n-        e.preventDefault();\n-        for (const field of formFields) {\n-            if (field.required && !field.value) {\n-                setErrorMessage(`${field.label} is required`);\n-                return;\n-            }\n-            if (field.validation) {\n-                try {\n-                    if (!field.validation(field.value)) {\n-                        setErrorMessage(`${field.label} is invalid`);\n-                        return;\n-                    }\n-                } catch (error: any) {\n-                    setErrorMessage(error.message);\n-                    return;\n-                }\n-            }\n+  const [formFields, setFormFields] = useState(fields);\n+  const [errorMessage, setErrorMessage] = useState(\"\");\n+  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n+    e.preventDefault();\n+    for (const field of formFields) {\n+      if (field.required && !field.value) {\n+        setErrorMessage(`${field.label} is required`);\n+        return;\n+      }\n+      if (field.validation) {\n+        try {\n+          if (!field.validation(field.value)) {\n+            setErrorMessage(`${field.label} is invalid`);\n+            return;\n+          }\n+        } catch (error: any) {\n+          setErrorMessage(error.message);\n+          return;\n         }\n-        const values = Object.fromEntries(new FormData(e.currentTarget));\n-        onSubmit(values);\n-    };\n-\n-    const closeErrorMessage = () => {\n-        setErrorMessage(\"\");\n+      }\n     }\n+    const values = Object.fromEntries(new FormData(e.currentTarget));\n+    onSubmit(values);\n+  };\n \n+  const closeErrorMessage = () => {\n+    setErrorMessage(\"\");\n+  };\n \n-    const createInput = (field: DynamicFormField) => {\n-        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-            field.value = e.target.value;\n-            setFormFields([...formFields]);\n-        }\n+  const createInput = (field: DynamicFormField) => {\n+    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+      field.value = e.target.value;\n+      setFormFields([...formFields]);\n+    };\n \n-        const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-            field.value = e.target.checked;\n-            setFormFields([...formFields]);\n-        }\n+    const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+      field.value = e.target.checked;\n+      setFormFields([...formFields]);\n+    };\n \n-        const handleSelectChange = (e: SelectChangeEvent<{ value: unknown }>, node: React.ReactNode) => {\n-            field.value = e.target.value;\n-            setFormFields([...formFields]);\n-        }\n+    const handleSelectChange = (\n+      e: SelectChangeEvent<{ value: unknown }>,\n+      node: React.ReactNode\n+    ) => {\n+      field.value = e.target.value;\n+      setFormFields([...formFields]);\n+    };\n \n-        switch (field.type) {\n-            case DynamicFormFieldType.Text:\n-            case DynamicFormFieldType.Number:\n-            case DynamicFormFieldType.Email:\n-            case DynamicFormFieldType.Tel:\n-            case DynamicFormFieldType.Url:\n-            case DynamicFormFieldType.Password:\n-                return (\n-                    <TextField\n-                        key={field.name}\n-                        name={field.name}\n-                        label={field.label}\n-                        type={field.type}\n-                        // required={field.required}\n-                        value={field.value}\n-                        variant=\"standard\"\n-                        onChange={handleChange}\n-                    />\n-                );\n-            case DynamicFormFieldType.Checkbox:\n-                return (\n-                    <Checkbox\n-                        key={field.name}\n-                        name={field.name}\n-                        required={field.required}\n-                        checked={field.value}\n-                    />\n-                );\n-            case DynamicFormFieldType.Select:\n-                return (\n-                    <FormControl>\n-                        <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n-                        <Select\n-                            labelId=\"demo-simple-select-label\"\n-                            id=\"demo-simple-select\"\n-                            value={field.value}\n-                            label={field.label}\n-                            onChange={handleSelectChange}\n-                        >\n-                            {field.options?.map((option) => (\n-                                <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n-                            ))}\n-                        </Select>\n-                    </FormControl >\n-                );\n+    switch (field.type) {\n+      case DynamicFormFieldType.Text:\n+      case DynamicFormFieldType.Number:\n+      case DynamicFormFieldType.Email:\n+      case DynamicFormFieldType.Tel:\n+      case DynamicFormFieldType.Url:\n+      case DynamicFormFieldType.Password:\n+        return (\n+          <TextField\n+            key={field.name}\n+            name={field.name}\n+            label={field.label}\n+            type={field.type}\n+            // required={field.required}\n+            value={field.value}\n+            variant=\"standard\"\n+            onChange={handleChange}\n+          />\n+        );\n+      case DynamicFormFieldType.Checkbox:\n+        return (\n+          <Checkbox\n+            key={field.name}\n+            name={field.name}\n+            required={field.required}\n+            checked={field.value}\n+            onChange={handleCheckboxChange}\n+          />\n+        );\n+      case DynamicFormFieldType.Select:\n+        return (\n+          <FormControl>\n+            <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n+            <Select\n+              labelId=\"demo-simple-select-label\"\n+              id=\"demo-simple-select\"\n+              value={field.value}\n+              label={field.label}\n+              onChange={handleSelectChange}\n+            >\n+              {field.options?.map((option) => (\n+                <MenuItem key={option.value} value={option.value}>\n+                  {option.label}\n+                </MenuItem>\n+              ))}\n+            </Select>\n+          </FormControl>\n+        );\n \n-            default:\n-                return null;\n-        }\n+      default:\n+        return null;\n     }\n+  };\n \n+  return (\n+    <>\n+      <Box component=\"form\" onSubmit={handleSubmit}>\n+        {formFields.map((field) => (\n+          <Box key={field.name} sx={{ marginBottom: \"1em\" }}>\n+            <InputLabel htmlFor={field.name} sx={{ display: \"none\" }}>\n+              {field.label}\n+            </InputLabel>\n+            {createInput(field)}\n+          </Box>\n+        ))}\n+        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n+          <Button type=\"submit\" variant=\"contained\">\n+            Submit\n+          </Button>\n+        </Box>\n+      </Box>\n \n-    return (\n-        <>\n-            <Box component=\"form\" onSubmit={handleSubmit}>\n-                {formFields.map((field) => (\n-                    <Box key={field.name} sx={{ marginBottom: '1em' }}>\n-                        <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n-                        {createInput(field)}\n-                    </Box>\n-                ))}\n-                <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n-                    <Button type=\"submit\" variant=\"contained\">Submit</Button>\n-                </Box>\n-            </Box>\n-\n-            {\n-                errorMessage && <Snackbar open={errorMessage !== \"\"} autoHideDuration={6000} onClose={closeErrorMessage}>\n-                    <Alert severity=\"error\">{errorMessage}</Alert>\n-                </Snackbar>\n-            }\n-\n-        </>\n-    )\n+      {errorMessage && (\n+        <Snackbar\n+          open={errorMessage !== \"\"}\n+          autoHideDuration={6000}\n+          onClose={closeErrorMessage}\n+        >\n+          <Alert severity=\"error\">{errorMessage}</Alert>\n+        </Snackbar>\n+      )}\n+    </>\n+  );\n }\n"
                },
                {
                    "date": 1679987201170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n               id=\"demo-simple-select\"\n               value={field.value}\n               label={field.label}\n               onChange={handleSelectChange}\n+              sx={{ width: \"100%\" }\n             >\n               {field.options?.map((option) => (\n                 <MenuItem key={option.value} value={option.value}>\n                   {option.label}\n"
                },
                {
                    "date": 1679987240829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,17 +118,17 @@\n           />\n         );\n       case DynamicFormFieldType.Select:\n         return (\n-          <FormControl>\n+          <FormControl sx={{width: '100%'}}>\n             <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n             <Select\n               labelId=\"demo-simple-select-label\"\n               id=\"demo-simple-select\"\n               value={field.value}\n               label={field.label}\n               onChange={handleSelectChange}\n-              sx={{ width: \"100%\" }\n+              sx={{ width: \"100%\" }}\n             >\n               {field.options?.map((option) => (\n                 <MenuItem key={option.value} value={option.value}>\n                   {option.label}\n"
                },
                {
                    "date": 1679987248901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,8 @@\n               id=\"demo-simple-select\"\n               value={field.value}\n               label={field.label}\n               onChange={handleSelectChange}\n-              sx={{ width: \"100%\" }}\n             >\n               {field.options?.map((option) => (\n                 <MenuItem key={option.value} value={option.value}>\n                   {option.label}\n"
                },
                {
                    "date": 1679987311436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n               label={field.label}\n               onChange={handleSelectChange}\n             >\n               {field.options?.map((option) => (\n-                <MenuItem key={option.value} value={option.value}>\n+                <MenuItem key={option.value} value={option.value} selected={option.value === field.value}>\n                   {option.label}\n                 </MenuItem>\n               ))}\n             </Select>\n"
                },
                {
                    "date": 1679987842918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,15 @@\n   };\n \n   const createInput = (field: DynamicFormField) => {\n     const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-      field.value = e.target.value;\n+      switch (field.type) {\n+        case DynamicFormFieldType.Number:\n+          field.value = Number(e.target.value);\n+          break;\n+        default:\n+          field.value = e.target.value;\n+      }\n       setFormFields([...formFields]);\n     };\n \n     const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n@@ -80,10 +86,9 @@\n       setFormFields([...formFields]);\n     };\n \n     const handleSelectChange = (\n-      e: SelectChangeEvent<{ value: unknown }>,\n-      node: React.ReactNode\n+      e: SelectChangeEvent<{ value: unknown }>\n     ) => {\n       field.value = e.target.value;\n       setFormFields([...formFields]);\n     };\n"
                },
                {
                    "date": 1679989339420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,12 @@\n           return;\n         }\n       }\n     }\n-    const values = Object.fromEntries(new FormData(e.currentTarget));\n+    const values = formFields.reduce((values, field) => {\n+      values[field.name] = field.value;\n+      return values;\n+    }, {} as any);\n     onSubmit(values);\n   };\n \n   const closeErrorMessage = () => {\n"
                },
                {
                    "date": 1679990551746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n           />\n         );\n       case DynamicFormFieldType.Select:\n         return (\n-          <FormControl sx={{width: '100%'}}>\n+          <FormControl sx={{ width: '100%' }}>\n             <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n             <Select\n               labelId=\"demo-simple-select-label\"\n               id=\"demo-simple-select\"\n@@ -160,10 +160,11 @@\n             </InputLabel>\n             {createInput(field)}\n           </Box>\n         ))}\n-        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n-          <Button type=\"submit\" variant=\"contained\">\n+        <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n+          <Button variant=\"error\">Cancel</Button>\n+          <Button type=\"submit\">\n             Submit\n           </Button>\n         </Box>\n       </Box>\n"
                },
                {
                    "date": 1679990557015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n             {createInput(field)}\n           </Box>\n         ))}\n         <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n-          <Button variant=\"error\">Cancel</Button>\n+          <Button color=\"error\">Cancel</Button>\n           <Button type=\"submit\">\n             Submit\n           </Button>\n         </Box>\n"
                },
                {
                    "date": 1679990625006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,12 @@\n \n export interface DynamicFormProps {\n   fields: DynamicFormField[];\n   onSubmit: (values: any) => void;\n+  onCancel?: () => void;\n }\n \n-export default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n+export default function DynamicForm({ fields, onSubmit, onCancel }: DynamicFormProps) {\n   const [formFields, setFormFields] = useState(fields);\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n     e.preventDefault();\n@@ -161,11 +162,11 @@\n             {createInput(field)}\n           </Box>\n         ))}\n         <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n-          <Button color=\"error\">Cancel</Button>\n+          <Button color=\"error\" onClick={onCancel}>Cancel</Button>\n           <Button type=\"submit\">\n-            Submit\n+            Save\n           </Button>\n         </Box>\n       </Box>\n \n"
                },
                {
                    "date": 1679991028790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,12 @@\n export interface DynamicFormProps {\n   fields: DynamicFormField[];\n   onSubmit: (values: any) => void;\n   onCancel?: () => void;\n+  onClose?: () => void;\n }\n \n-export default function DynamicForm({ fields, onSubmit, onCancel }: DynamicFormProps) {\n+export default function DynamicForm({ fields, onSubmit, onCancel, onClose = () => {} }: DynamicFormProps) {\n   const [formFields, setFormFields] = useState(fields);\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n     e.preventDefault();\n@@ -66,8 +67,9 @@\n       values[field.name] = field.value;\n       return values;\n     }, {} as any);\n     onSubmit(values);\n+    onClose();\n   };\n \n   const closeErrorMessage = () => {\n     setErrorMessage(\"\");\n"
                },
                {
                    "date": 1679991059239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { nop } from \"@/tools/nop\";\n import {\n   Alert,\n   Box,\n   Button,\n@@ -40,9 +41,11 @@\n   onCancel?: () => void;\n   onClose?: () => void;\n }\n \n-export default function DynamicForm({ fields, onSubmit, onCancel, onClose = () => {} }: DynamicFormProps) {\n+export default function DynamicForm(\n+  { fields, onSubmit = nop, onCancel = nop, onClose = nop }: DynamicFormProps\n+) {\n   const [formFields, setFormFields] = useState(fields);\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n     e.preventDefault();\n"
                },
                {
                    "date": 1679991084081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   MenuItem,\n   Select,\n   Snackbar,\n   TextField,\n-  SelectChangeEvent\n+  SelectChangeEvent,\n } from \"@mui/material\";\n import { useState } from \"react\";\n \n export enum DynamicFormFieldType {\n@@ -41,11 +41,14 @@\n   onCancel?: () => void;\n   onClose?: () => void;\n }\n \n-export default function DynamicForm(\n-  { fields, onSubmit = nop, onCancel = nop, onClose = nop }: DynamicFormProps\n-) {\n+export default function DynamicForm({\n+  fields,\n+  onSubmit = nop,\n+  onCancel = nop,\n+  onClose = nop,\n+}: DynamicFormProps) {\n   const [formFields, setFormFields] = useState(fields);\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n     e.preventDefault();\n@@ -94,11 +97,9 @@\n       field.value = e.target.checked;\n       setFormFields([...formFields]);\n     };\n \n-    const handleSelectChange = (\n-      e: SelectChangeEvent<{ value: unknown }>\n-    ) => {\n+    const handleSelectChange = (e: SelectChangeEvent<{ value: unknown }>) => {\n       field.value = e.target.value;\n       setFormFields([...formFields]);\n     };\n \n@@ -132,9 +133,9 @@\n           />\n         );\n       case DynamicFormFieldType.Select:\n         return (\n-          <FormControl sx={{ width: '100%' }}>\n+          <FormControl sx={{ width: \"100%\" }}>\n             <InputLabel id=\"demo-simple-select-label\">{field.label}</InputLabel>\n             <Select\n               labelId=\"demo-simple-select-label\"\n               id=\"demo-simple-select\"\n@@ -142,9 +143,13 @@\n               label={field.label}\n               onChange={handleSelectChange}\n             >\n               {field.options?.map((option) => (\n-                <MenuItem key={option.value} value={option.value} selected={option.value === field.value}>\n+                <MenuItem\n+                  key={option.value}\n+                  value={option.value}\n+                  selected={option.value === field.value}\n+                >\n                   {option.label}\n                 </MenuItem>\n               ))}\n             </Select>\n@@ -167,19 +172,19 @@\n             {createInput(field)}\n           </Box>\n         ))}\n         <Box sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n-          <Button color=\"error\" onClick={onCancel}>Cancel</Button>\n-          <Button type=\"submit\">\n-            Save\n+          <Button color=\"error\" onClick={onCancel}>\n+            Cancel\n           </Button>\n+          <Button type=\"submit\">Save</Button>\n         </Box>\n       </Box>\n \n       {errorMessage && (\n         <Snackbar\n           open={errorMessage !== \"\"}\n-          autoHideDuration={6000}\n+          autoHideDuration={3000}\n           onClose={closeErrorMessage}\n         >\n           <Alert severity=\"error\">{errorMessage}</Alert>\n         </Snackbar>\n"
                },
                {
                    "date": 1679991178221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n \n export default function DynamicForm({\n   fields,\n   onSubmit = nop,\n-  onCancel = nop,\n   onClose = nop,\n+  onCancel = onClose,\n }: DynamicFormProps) {\n   const [formFields, setFormFields] = useState(fields);\n   const [errorMessage, setErrorMessage] = useState(\"\");\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n"
                }
            ],
            "date": 1679981048677,
            "name": "Commit-0",
            "content": "import { Box, Button, Checkbox, InputLabel, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport enum DynamicFormFieldType {\n    Text = \"text\",\n    Number = \"number\",\n    Email = \"email\",\n    Tel = \"tel\",\n    Url = \"url\",\n}\n\nexport interface DynamicFormField {\n    name: string;\n    label: string;\n    type: string;\n    required?: boolean;\n    value?: any;\n    validation?: (value: any) => boolean;\n}\n\nexport interface DynamicFormProps {\n    fields: DynamicFormField[];\n    onSubmit: (values: any) => void;\n}\n\nexport default function DynamicForm({ fields, onSubmit }: DynamicFormProps) {\n    const [formFields, setFormFields] = useState(fields);\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (!e.currentTarget.checkValidity()) {\n            return;\n        }\n        const values = Object.fromEntries(new FormData(e.currentTarget));\n        onSubmit(values);\n    };\n\n\n    const createInput = (field: DynamicFormField) => {\n        const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            if (field.validation) {\n                const isValid = field.validation(e.target.value);\n                if (!isValid) {\n                    e.target.setCustomValidity(\"Invalid value\");\n                } else {\n                    e.target.setCustomValidity(\"\");\n                }\n            }\n\n            field.value = e.target.value;\n            setFormFields([...formFields]);\n        }\n\n        switch (field.type) {\n            case DynamicFormFieldType.Text:\n            case DynamicFormFieldType.Number:\n            case DynamicFormFieldType.Email:\n            case DynamicFormFieldType.Tel:\n            case DynamicFormFieldType.Url:\n                return (\n                    <TextField\n                        key={field.name}\n                        name={field.name}\n                        label={field.label}\n                        type={field.type}\n                        required={field.required}\n                        value={field.value}\n                        variant=\"standard\"\n                        onChange={handleChange}\n                    />\n                );\n            case \"checkbox\":\n                return (\n                    <Checkbox\n                        key={field.name}\n                        name={field.name}\n                        required={field.required}\n                        checked={field.value}\n                    />\n                );\n            default:\n                return null;\n        }\n    }\n\n\n    return (\n        <Box component=\"form\" onSubmit={handleSubmit}>\n            {formFields.map((field) => (\n                <Box key={field.name} sx={{ marginBottom: '1em' }}>\n                    <InputLabel htmlFor={field.name} sx={{ display: 'none' }}>{field.label}</InputLabel>\n                    {createInput(field)}\n                </Box>\n            ))}\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                <Button type=\"submit\" variant=\"contained\">Submit</Button>\n            </Box>\n        </Box>\n    )\n}\n"
        }
    ]
}