{
    "sourceFile": "src/types/user.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1679982623359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1679983205659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,42 @@\n-export class User {\n-    name: UserName;\n-    email: string;\n-    picture: string;\n-    location: UserLocation;\n-    id: string;\n+// export class User {\n+//     name: UserName;\n+//     email: string;\n+//     picture: string;\n+//     location: UserLocation;\n+//     id: string;\n \n-    constructor(user?: any) {\n-        if (!user) {\n-            return;\n-        }\n+//     constructor(user?: any) {\n+//         if (!user) {\n+//             return;\n+//         }\n \n-        // We do this because the API returns a different object\n-        // than the one we use in the app.\n-        this.name = user.name;\n-        this.email = user.email;\n-        this.picture = user.picture.medium;\n-        this.location = {\n-            country: user.location.country,\n-            city: user.location.city,\n-            street: {\n-                name: user.location.street.name,\n-                number: user.location.street.number,\n-            },\n-        }\n-        this.id = user.login.uuid;\n-    }\n+//         // We do this because the API returns a different object\n+//         // than the one we use in the app.\n+//         this.name = user.name;\n+//         this.email = user.email;\n+//         this.picture = user.picture.medium;\n+//         this.location = {\n+//             country: user.location.country,\n+//             city: user.location.city,\n+//             street: {\n+//                 name: user.location.street.name,\n+//                 number: user.location.street.number,\n+//             },\n+//         }\n+//         this.id = user.login.uuid;\n+//     }\n \n-    toJSON() {\n-        return {\n-            name: this.name,\n-            email: this.email,\n-            picture: this.picture,\n-            location: this.location,\n-            id: this.id,\n-        };\n-    }\n-}\n+//     toJSON() {\n+//         return {\n+//             name: this.name,\n+//             email: this.email,\n+//             picture: this.picture,\n+//             location: this.location,\n+//             id: this.id,\n+//         };\n+//     }\n+// }\n \n export interface UserName {\n     title: string;\n     first: string;\n@@ -68,8 +68,8 @@\n                 name: '',\n                 number: 0,\n             },\n         },\n-        id: '',\n+        id: crypto.randomUUID(),\n     };\n }\n \n"
                },
                {
                    "date": 1679985519898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,6 @@\n-// export class User {\n-//     name: UserName;\n-//     email: string;\n-//     picture: string;\n-//     location: UserLocation;\n-//     id: string;\n+export type User = ReturnType<typeof user>;\n \n-//     constructor(user?: any) {\n-//         if (!user) {\n-//             return;\n-//         }\n-\n-//         // We do this because the API returns a different object\n-//         // than the one we use in the app.\n-//         this.name = user.name;\n-//         this.email = user.email;\n-//         this.picture = user.picture.medium;\n-//         this.location = {\n-//             country: user.location.country,\n-//             city: user.location.city,\n-//             street: {\n-//                 name: user.location.street.name,\n-//                 number: user.location.street.number,\n-//             },\n-//         }\n-//         this.id = user.login.uuid;\n-//     }\n-\n-//     toJSON() {\n-//         return {\n-//             name: this.name,\n-//             email: this.email,\n-//             picture: this.picture,\n-//             location: this.location,\n-//             id: this.id,\n-//         };\n-//     }\n-// }\n-\n export interface UserName {\n     title: string;\n     first: string;\n     last: string;\n"
                },
                {
                    "date": 1679985548450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-export type User = ReturnType<typeof user>;\n+export type User = ReturnType<typeof createUser>;\n \n export interface UserName {\n     title: string;\n     first: string;\n@@ -14,9 +14,9 @@\n         number: number;\n     };\n }\n \n-export const user = () => {\n+export const createUser = () => {\n     return {\n         name: {\n             title: '',\n             first: '',\n"
                },
                {
                    "date": 1679986032286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,22 @@\n-export type User = ReturnType<typeof createUser>;\n+export interface User {\n+    name: UserName;\n+    email: string;\n+    picture: UserPicture;\n+    location: UserLocation;\n+    id: string;\n+}\n \n export interface UserName {\n     title: string;\n     first: string;\n     last: string;\n }\n \n+export interface UserPicture {\n+    medium: string;\n+}\n+\n export interface UserLocation {\n     country: string;\n     city: string;\n     street: {\n@@ -14,17 +24,39 @@\n         number: number;\n     };\n }\n \n-export const createUser = () => {\n+export const createUser = (user?: User): User => {\n+    if (user) {\n+        return {\n+            name: {\n+                title: user.name.title,\n+                first: user.name.first,\n+                last: user.name.last,\n+            },\n+            email: user.email,\n+            picture: user.picture,\n+            location: {\n+                country: user.location.country,\n+                city: user.location.city,\n+                street: {\n+                    name: user.location.street.name,\n+                    number: user.location.street.number,\n+                },\n+            },\n+            id: user.id,\n+        }\n+    }\n     return {\n         name: {\n             title: '',\n             first: '',\n             last: '',\n         },\n         email: '',\n-        picture: '',\n+        picture: {\n+            medium: '',\n+        },\n         location: {\n             country: '',\n             city: '',\n             street: {\n"
                },
                {
                    "date": 1679987731498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+export interface User {\n+    name: UserName;\n+    email: string;\n+    picture: UserPicture;\n+    location: UserLocation;\n+    id: string;\n+}\n+\n+export interface UserName {\n+    title: string;\n+    first: string;\n+    last: string;\n+}\n+\n+export interface UserPicture {\n+    medium: string;\n+}\n+\n+export interface UserLocation {\n+    country: string;\n+    city: string;\n+    street: {\n+        name: string;\n+        number: number;\n+    };\n+}\n+\n+export const createUser = (user?: User): User => {\n+    if (user) {\n+        return {\n+            name: {\n+                title: user.name.title,\n+                first: user.name.first,\n+                last: user.name.last,\n+            },\n+            email: user.email,\n+            picture: {\n+                medium: user.picture.medium,\n+            },\n+            location: {\n+                country: user.location.country,\n+                city: user.location.city,\n+                street: {\n+                    name: user.location.street.name,\n+                    number: user.location.street.number,\n+                },\n+            },\n+            id: user.id,\n+        }\n+    }\n+    return {\n+        name: {\n+            title: '',\n+            first: '',\n+            last: '',\n+        },\n+        email: '',\n+        picture: {\n+            medium: '',\n+        },\n+        location: {\n+            country: '',\n+            city: '',\n+            street: {\n+                name: '',\n+                number: 0,\n+            },\n+        },\n+        id: crypto.randomUUID(),\n+    };\n+}\n+\n"
                },
                {
                    "date": 1679989783648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,78 +65,8 @@\n                 name: '',\n                 number: 0,\n             },\n         },\n-        id: crypto.randomUUID(),\n+        id: '',\n     };\n }\n \n-export interface User {\n-    name: UserName;\n-    email: string;\n-    picture: UserPicture;\n-    location: UserLocation;\n-    id: string;\n-}\n-\n-export interface UserName {\n-    title: string;\n-    first: string;\n-    last: string;\n-}\n-\n-export interface UserPicture {\n-    medium: string;\n-}\n-\n-export interface UserLocation {\n-    country: string;\n-    city: string;\n-    street: {\n-        name: string;\n-        number: number;\n-    };\n-}\n-\n-export const createUser = (user?: User): User => {\n-    if (user) {\n-        return {\n-            name: {\n-                title: user.name.title,\n-                first: user.name.first,\n-                last: user.name.last,\n-            },\n-            email: user.email,\n-            picture: user.picture,\n-            location: {\n-                country: user.location.country,\n-                city: user.location.city,\n-                street: {\n-                    name: user.location.street.name,\n-                    number: user.location.street.number,\n-                },\n-            },\n-            id: user.id,\n-        }\n-    }\n-    return {\n-        name: {\n-            title: '',\n-            first: '',\n-            last: '',\n-        },\n-        email: '',\n-        picture: {\n-            medium: '',\n-        },\n-        location: {\n-            country: '',\n-            city: '',\n-            street: {\n-                name: '',\n-                number: 0,\n-            },\n-        },\n-        id: crypto.randomUUID(),\n-    };\n-}\n-\n"
                }
            ],
            "date": 1679982623359,
            "name": "Commit-0",
            "content": "export class User {\n    name: UserName;\n    email: string;\n    picture: string;\n    location: UserLocation;\n    id: string;\n\n    constructor(user?: any) {\n        if (!user) {\n            return;\n        }\n\n        // We do this because the API returns a different object\n        // than the one we use in the app.\n        this.name = user.name;\n        this.email = user.email;\n        this.picture = user.picture.medium;\n        this.location = {\n            country: user.location.country,\n            city: user.location.city,\n            street: {\n                name: user.location.street.name,\n                number: user.location.street.number,\n            },\n        }\n        this.id = user.login.uuid;\n    }\n\n    toJSON() {\n        return {\n            name: this.name,\n            email: this.email,\n            picture: this.picture,\n            location: this.location,\n            id: this.id,\n        };\n    }\n}\n\nexport interface UserName {\n    title: string;\n    first: string;\n    last: string;\n}\n\nexport interface UserLocation {\n    country: string;\n    city: string;\n    street: {\n        name: string;\n        number: number;\n    };\n}\n\nexport const user = () => {\n    return {\n        name: {\n            title: '',\n            first: '',\n            last: '',\n        },\n        email: '',\n        picture: '',\n        location: {\n            country: '',\n            city: '',\n            street: {\n                name: '',\n                number: 0,\n            },\n        },\n        id: '',\n    };\n}\n\n"
        }
    ]
}